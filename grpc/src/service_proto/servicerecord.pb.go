// Code generated by protoc-gen-go. DO NOT EDIT.
// source: servicerecord.proto

package service_proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	Vin                  string   `protobuf:"bytes,1,opt,name=vin,proto3" json:"vin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4fe9b1ff2649899, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetVin() string {
	if m != nil {
		return m.Vin
	}
	return ""
}

type ServiceRecord struct {
	DealerName           string   `protobuf:"bytes,1,opt,name=dealer_name,json=dealerName,proto3" json:"dealer_name,omitempty"`
	Timestamp            int64    `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Odometer             int64    `protobuf:"varint,3,opt,name=odometer,proto3" json:"odometer,omitempty"`
	RepairNo             string   `protobuf:"bytes,4,opt,name=repair_no,json=repairNo,proto3" json:"repair_no,omitempty"`
	AdvisorName          string   `protobuf:"bytes,5,opt,name=advisor_name,json=advisorName,proto3" json:"advisor_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceRecord) Reset()         { *m = ServiceRecord{} }
func (m *ServiceRecord) String() string { return proto.CompactTextString(m) }
func (*ServiceRecord) ProtoMessage()    {}
func (*ServiceRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4fe9b1ff2649899, []int{1}
}

func (m *ServiceRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceRecord.Unmarshal(m, b)
}
func (m *ServiceRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceRecord.Marshal(b, m, deterministic)
}
func (m *ServiceRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceRecord.Merge(m, src)
}
func (m *ServiceRecord) XXX_Size() int {
	return xxx_messageInfo_ServiceRecord.Size(m)
}
func (m *ServiceRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceRecord proto.InternalMessageInfo

func (m *ServiceRecord) GetDealerName() string {
	if m != nil {
		return m.DealerName
	}
	return ""
}

func (m *ServiceRecord) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ServiceRecord) GetOdometer() int64 {
	if m != nil {
		return m.Odometer
	}
	return 0
}

func (m *ServiceRecord) GetRepairNo() string {
	if m != nil {
		return m.RepairNo
	}
	return ""
}

func (m *ServiceRecord) GetAdvisorName() string {
	if m != nil {
		return m.AdvisorName
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "service_proto.Request")
	proto.RegisterType((*ServiceRecord)(nil), "service_proto.ServiceRecord")
}

func init() { proto.RegisterFile("servicerecord.proto", fileDescriptor_f4fe9b1ff2649899) }

var fileDescriptor_f4fe9b1ff2649899 = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0x87, 0x4d, 0xe3, 0x9f, 0x66, 0x6a, 0x45, 0x57, 0x29, 0xa1, 0x2d, 0x58, 0x73, 0xea, 0x29,
	0x88, 0x3e, 0x41, 0x0f, 0x52, 0x41, 0x29, 0x25, 0x3e, 0x40, 0x58, 0x9b, 0x39, 0x2c, 0x64, 0xb3,
	0x71, 0x76, 0x1a, 0xe9, 0xd1, 0xd7, 0xf1, 0x29, 0xa5, 0x9b, 0x45, 0x89, 0xc7, 0xde, 0x76, 0xbe,
	0xdf, 0xec, 0x37, 0xbb, 0x03, 0xd7, 0x16, 0xa9, 0x51, 0x1b, 0x24, 0xdc, 0x18, 0x2a, 0xd2, 0x9a,
	0x0c, 0x1b, 0x31, 0xf4, 0x30, 0x77, 0x65, 0x32, 0x81, 0xb3, 0x0c, 0x3f, 0xb6, 0x68, 0x59, 0x5c,
	0x42, 0xd8, 0xa8, 0x2a, 0x0e, 0x66, 0xc1, 0x3c, 0xca, 0xf6, 0xc7, 0xe4, 0x3b, 0x80, 0xe1, 0x5b,
	0xdb, 0x9e, 0x39, 0x87, 0xb8, 0x85, 0x41, 0x81, 0xb2, 0x44, 0xca, 0x2b, 0xa9, 0xd1, 0xf7, 0x42,
	0x8b, 0x56, 0x52, 0xa3, 0x98, 0x42, 0xc4, 0x4a, 0xa3, 0x65, 0xa9, 0xeb, 0xb8, 0x37, 0x0b, 0xe6,
	0x61, 0xf6, 0x07, 0xc4, 0x18, 0xfa, 0xa6, 0x30, 0x1a, 0x19, 0x29, 0x0e, 0x5d, 0xf8, 0x5b, 0x8b,
	0x09, 0x44, 0x84, 0xb5, 0x54, 0x94, 0x57, 0x26, 0x3e, 0x76, 0xe2, 0x7e, 0x0b, 0x56, 0x46, 0xdc,
	0xc1, 0xb9, 0x2c, 0x1a, 0x65, 0x8d, 0x1f, 0x7c, 0xe2, 0xf2, 0x81, 0x67, 0xfb, 0xc9, 0x0f, 0x5f,
	0x3d, 0xb8, 0xf0, 0x8f, 0x7d, 0x56, 0x96, 0x0d, 0xed, 0xc4, 0x1a, 0x46, 0x4b, 0xe4, 0x57, 0xc9,
	0x68, 0xb9, 0xfb, 0x8f, 0x51, 0xda, 0x59, 0x43, 0xea, 0x77, 0x30, 0x9e, 0xfe, 0xe3, 0x9d, 0x5b,
	0xc9, 0x91, 0x58, 0xc3, 0xcd, 0x12, 0x79, 0x51, 0x96, 0x9d, 0xc0, 0x1e, 0xea, 0xbb, 0x0f, 0xc4,
	0x0b, 0x5c, 0x2d, 0xca, 0x4f, 0xb9, 0xb3, 0x19, 0xf2, 0x96, 0xaa, 0x27, 0x22, 0x43, 0x87, 0xea,
	0xde, 0x4f, 0x1d, 0x7e, 0xfc, 0x09, 0x00, 0x00, 0xff, 0xff, 0x7c, 0x66, 0x64, 0xfd, 0xfa, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ServiceHistoryClient is the client API for ServiceHistory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceHistoryClient interface {
	GetLatestServiceRecord(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ServiceRecord, error)
	GetAllServiceRecords(ctx context.Context, in *Request, opts ...grpc.CallOption) (ServiceHistory_GetAllServiceRecordsClient, error)
	AlwaysReturnError(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ServiceRecord, error)
}

type serviceHistoryClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceHistoryClient(cc grpc.ClientConnInterface) ServiceHistoryClient {
	return &serviceHistoryClient{cc}
}

func (c *serviceHistoryClient) GetLatestServiceRecord(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ServiceRecord, error) {
	out := new(ServiceRecord)
	err := c.cc.Invoke(ctx, "/service_proto.ServiceHistory/GetLatestServiceRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceHistoryClient) GetAllServiceRecords(ctx context.Context, in *Request, opts ...grpc.CallOption) (ServiceHistory_GetAllServiceRecordsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ServiceHistory_serviceDesc.Streams[0], "/service_proto.ServiceHistory/GetAllServiceRecords", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceHistoryGetAllServiceRecordsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceHistory_GetAllServiceRecordsClient interface {
	Recv() (*ServiceRecord, error)
	grpc.ClientStream
}

type serviceHistoryGetAllServiceRecordsClient struct {
	grpc.ClientStream
}

func (x *serviceHistoryGetAllServiceRecordsClient) Recv() (*ServiceRecord, error) {
	m := new(ServiceRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceHistoryClient) AlwaysReturnError(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ServiceRecord, error) {
	out := new(ServiceRecord)
	err := c.cc.Invoke(ctx, "/service_proto.ServiceHistory/AlwaysReturnError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceHistoryServer is the server API for ServiceHistory service.
type ServiceHistoryServer interface {
	GetLatestServiceRecord(context.Context, *Request) (*ServiceRecord, error)
	GetAllServiceRecords(*Request, ServiceHistory_GetAllServiceRecordsServer) error
	AlwaysReturnError(context.Context, *Request) (*ServiceRecord, error)
}

// UnimplementedServiceHistoryServer can be embedded to have forward compatible implementations.
type UnimplementedServiceHistoryServer struct {
}

func (*UnimplementedServiceHistoryServer) GetLatestServiceRecord(ctx context.Context, req *Request) (*ServiceRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestServiceRecord not implemented")
}
func (*UnimplementedServiceHistoryServer) GetAllServiceRecords(req *Request, srv ServiceHistory_GetAllServiceRecordsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllServiceRecords not implemented")
}
func (*UnimplementedServiceHistoryServer) AlwaysReturnError(ctx context.Context, req *Request) (*ServiceRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlwaysReturnError not implemented")
}

func RegisterServiceHistoryServer(s *grpc.Server, srv ServiceHistoryServer) {
	s.RegisterService(&_ServiceHistory_serviceDesc, srv)
}

func _ServiceHistory_GetLatestServiceRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceHistoryServer).GetLatestServiceRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_proto.ServiceHistory/GetLatestServiceRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceHistoryServer).GetLatestServiceRecord(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceHistory_GetAllServiceRecords_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceHistoryServer).GetAllServiceRecords(m, &serviceHistoryGetAllServiceRecordsServer{stream})
}

type ServiceHistory_GetAllServiceRecordsServer interface {
	Send(*ServiceRecord) error
	grpc.ServerStream
}

type serviceHistoryGetAllServiceRecordsServer struct {
	grpc.ServerStream
}

func (x *serviceHistoryGetAllServiceRecordsServer) Send(m *ServiceRecord) error {
	return x.ServerStream.SendMsg(m)
}

func _ServiceHistory_AlwaysReturnError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceHistoryServer).AlwaysReturnError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_proto.ServiceHistory/AlwaysReturnError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceHistoryServer).AlwaysReturnError(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceHistory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service_proto.ServiceHistory",
	HandlerType: (*ServiceHistoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLatestServiceRecord",
			Handler:    _ServiceHistory_GetLatestServiceRecord_Handler,
		},
		{
			MethodName: "AlwaysReturnError",
			Handler:    _ServiceHistory_AlwaysReturnError_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllServiceRecords",
			Handler:       _ServiceHistory_GetAllServiceRecords_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "servicerecord.proto",
}
